name: Deploy for ci/cd

# 트리거
on:
  # 원인 : 푸시
  push:
    # 대상 브런치
    branches:
      # 대상 브런치는 main
      - main

# 해야될 일 => jobs
jobs:
  # 잡 전체에 대한 이름(커스텀)
  cicd-deploy:
    # ubuntu linux 준비 -> 해당 작업이 진행되는 베이스 os 지정
    runs-on: ubuntu-latest
    # 개별 작업 단계 지정
    steps:
      # https://github.com/actions/checkout 사용
      # 해당 작업이 수행되먄 본 레포지토리(저장소)가 체크아웃되어 os 단에 저장
      # 향후 워클로우엥서 액세스 처리 가능하게 구성됨
      # name: 작업명 기술, uses: 실제 할 일 기술
      - name: Github Repository 내 파일들 checkout(불러오기)
        uses: actions/checkout@v4

      # JDK 17 버전 설치
      # https://github.com/actions/setup-java
      - name: JDK 17 버전 설치
        uses: actions/setup-java@v4
        with:
           distribution: 'temurin' # See 'Supported distributions' for available options
           java-version: '17'

      # application.yml 동적 생성
      # 소스 코드 내에 위치 (덮어쓰기?, 신규 작성?)
      # RDS 세팅된 후에 진행, 현재는 스킵

      # build 준비
      # chmod +x ./gradlew : 퍼밋션 오류 발생시 처리
      # ./gradlew clean build
      - name: 단위 테스트 및 빌드
      # 명령어가 여러개면 | 추가
      # 1. 빌드용 쉘스크립트(gradlew)를 퍼미션 조정
      # 2. 빌드
      # 3. 현재 위치 확인
      # 4. 현재 위치 목록
      # 5. 빌드된 산출물의 목록 확인
        run: |
          chmod +x ./gradlew
         ./gradlew clean build
          pwd
          ls
          ls ./build/libs

      # 이름이 너무 길므로 적당하게 수정 -> 리눅스 명령어
      - name: 관리상 빌드된 결과물의 이름을 변경 처리
        run: mv ./build/libs/*SNAPSHOT.jar ./run.jar
             ls

      # EC2로 업로드
      # https://github.com/appleboy/scp-action
      # 호스트 정보(IP), 접속자명(ubuntu), 키파일(pem) -> 시크릿!!
      # 업로드 대상(run.jar)
      #타겟의 큭정 경로, /home/ubuntu/server/demo
      - name: EC2에 jar 파일 업로드
        uses: appleboy/scp-action@v0.1.7
        # 위의 액션을 위한 파라미터

        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: run.jar
          target: /home/ubuntu/server/demo